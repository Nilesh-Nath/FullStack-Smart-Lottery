{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minimumEntryFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinatorAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_TransactionReverted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughEntraceFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__RaffleNotOpen",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "players",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpKeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "gotWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "raffleEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "wordRequested",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinimumEntryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.raffleStates",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getcallbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getkeyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getsubscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9673775ba9d11a9f789815a759f4ed054f2f6b7eab112ef284acee2fe34eef18",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1295807",
    "logsBloom": "0x
    "blockHash": "0x7f30fa3de8c8be34107c7ca8bdc613607bb5cb73aba0347059e439246ad03634",
    "transactionHash": "0x9673775ba9d11a9f789815a759f4ed054f2f6b7eab112ef284acee2fe34eef18",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1295807",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10000000000000000",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "500000",
    "1",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "f954c14e71f117951bf9d0535427450d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumEntryFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinatorAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_TransactionReverted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughEntraceFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__RaffleNotOpen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"players\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpKeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"gotWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"raffleEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"wordRequested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumEntryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.raffleStates\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getcallbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getkeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getsubscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Nilesh Nath description : It randomly picks the winner from the participants of the lotter and transfer all the               funds to that address\",\"details\":\"It uses Chainlink VRF version 2 and chainlink keepers\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Smart Lottery\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"Following are the requirements that is to be completed for triggering Chainlink Keepers 1.TimeStamp reach 2.Enough Players in Lottery 3.Enough Balance in Lottery 4.Lottery in Open State\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// Imports\\n/** Imports for Getting Random Numbers using Chainlinks VRF */\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\n\\n// Error Codes\\nerror Raffle__NotEnoughEntraceFee();\\nerror Raffle__RaffleNotOpen();\\nerror Raffle_TransactionReverted();\\nerror Raffle__UpKeepNotNeeded(\\n    uint256 raffleState,\\n    uint256 players,\\n    uint256 balance\\n);\\n\\n/**\\n * @title Smart Lottery\\n * @author Nilesh Nath\\n * description : It randomly picks the winner from the participants of the lotter and transfer all the\\n *               funds to that address\\n * @dev It uses Chainlink VRF version 2 and chainlink keepers\\n */\\n\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    // Enum\\n    enum raffleStates {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    // State Variables\\n    uint256 private immutable i_minimumEntryFee;\\n    raffleStates private s_raffleState;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoorinator;\\n    bytes32 private immutable i_keyHash;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 4;\\n    uint32 private constant NUM_WORDS = 1;\\n    uint64 private immutable i_subscriptionId;\\n\\n    // Lottery Variables\\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_interval;\\n    address private s_winner;\\n\\n    // Constructor\\n    constructor(\\n        uint256 minimumEntryFee,\\n        address vrfCoordinatorAddress,\\n        bytes32 keyHash,\\n        uint32 callbackGasLimit,\\n        uint64 subscriptionId,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorAddress) {\\n        i_minimumEntryFee = minimumEntryFee;\\n        i_vrfCoorinator = VRFCoordinatorV2Interface(vrfCoordinatorAddress);\\n        i_keyHash = keyHash;\\n        i_callbackGasLimit = callbackGasLimit;\\n        i_subscriptionId = subscriptionId;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    // Events\\n    event raffleEntered(address indexed player);\\n    event wordRequested(uint256 indexed requestId);\\n    event gotWinner(address indexed winner);\\n\\n    // Functions\\n    function enterRaffle() public payable {\\n        if (msg.value < i_minimumEntryFee) {\\n            revert Raffle__NotEnoughEntraceFee();\\n        }\\n        if (s_raffleState != raffleStates.OPEN) {\\n            revert Raffle__RaffleNotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit raffleEntered(msg.sender);\\n    }\\n\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        (bool upKeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upKeepNeeded) {\\n            revert Raffle__UpKeepNotNeeded(\\n                uint256(s_raffleState),\\n                s_players.length,\\n                address(this).balance\\n            );\\n        }\\n        s_raffleState = raffleStates.CALCULATING;\\n        uint256 requestId = i_vrfCoorinator.requestRandomWords(\\n            i_keyHash,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit wordRequested(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /**requestId*/,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 winnerIndex = randomWords[0] % s_players.length;\\n        address payable winner = s_players[winnerIndex];\\n        s_winner = winner;\\n        s_players = new address payable[](0);\\n        s_raffleState = raffleStates.OPEN;\\n        (bool success, ) = winner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Raffle_TransactionReverted();\\n        }\\n        emit gotWinner(winner);\\n    }\\n\\n    /**Following are the requirements that is to be completed for triggering Chainlink Keepers\\n     * 1.TimeStamp reach\\n     * 2.Enough Players in Lottery\\n     * 3.Enough Balance in Lottery\\n     * 4.Lottery in Open State\\n     */\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\n    {\\n        bool isOpen = (s_raffleState == raffleStates.OPEN);\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = ((address(this).balance) > 0);\\n        bool isTime = (block.timestamp - s_lastTimeStamp) > i_interval;\\n        upkeepNeeded = (isOpen && hasBalance && hasPlayers && isTime);\\n        return (upkeepNeeded, \\\"\\\");\\n    }\\n\\n    // Getters\\n    function getMinimumEntryFee() public view returns (uint256) {\\n        return i_minimumEntryFee;\\n    }\\n\\n    function getRaffleState() public view returns (raffleStates) {\\n        return s_raffleState;\\n    }\\n\\n    function getPlayers(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getWinner() public view returns (address) {\\n        return s_winner;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getcallbackGasLimit() public view returns (uint32) {\\n        return i_callbackGasLimit;\\n    }\\n\\n    function getkeyHash() public view returns (bytes32) {\\n        return i_keyHash;\\n    }\\n\\n    function getsubscriptionId() public view returns (uint64) {\\n        return i_subscriptionId;\\n    }\\n\\n    function getNumOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function getContractBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n}\\n\",\"keccak256\":\"0xbffb90a91975808e3d4b885dc19516caacb69401d324159df74f1d5f792b7a93\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200197738038062001977833981810160405281019062000038919062000266565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508560a081815250508473ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508263ffffffff166101008163ffffffff16815250508167ffffffffffffffff166101208167ffffffffffffffff16815250504260028190555080610140818152505050505050505062000302565b600080fd5b6000819050919050565b6200011a8162000105565b81146200012657600080fd5b50565b6000815190506200013a816200010f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200016d8262000140565b9050919050565b6200017f8162000160565b81146200018b57600080fd5b50565b6000815190506200019f8162000174565b92915050565b6000819050919050565b620001ba81620001a5565b8114620001c657600080fd5b50565b600081519050620001da81620001af565b92915050565b600063ffffffff82169050919050565b620001fb81620001e0565b81146200020757600080fd5b50565b6000815190506200021b81620001f0565b92915050565b600067ffffffffffffffff82169050919050565b620002408162000221565b81146200024c57600080fd5b50565b600081519050620002608162000235565b92915050565b60008060008060008060c0878903121562000286576200028562000100565b5b60006200029689828a0162000129565b9650506020620002a989828a016200018e565b9550506040620002bc89828a01620001c9565b9450506060620002cf89828a016200020a565b9350506080620002e289828a016200024f565b92505060a0620002f589828a0162000129565b9150509295509295509295565b60805160a05160c05160e0516101005161012051610140516115f062000387600039600081816108f6015261099801526000818161076301526109e801526000818161078601526109c001526000818161062d0152610742015260006107060152600081816104b60152610a100152600081816103f6015261044a01526115f06000f3fe6080604052600436106100fe5760003560e01c8063565429de1161009557806391ad27b41161006457806391ad27b4146103075780639862eed014610332578063b4f8d9f21461035d578063c1945a2614610388578063c1c244e8146103b3576100fe565b8063565429de146102485780636e04ff0d146102735780636f9fb98a146102b15780638e7ea5b2146102dc576100fe565b806340cc232b116100d157806340cc232b1461018c5780634585e33b146101b7578063460e2049146101e057806353a2c19a1461021d576100fe565b8063115cbaf5146101035780631fe543e31461012e5780632cfcc53914610157578063320229eb14610161575b600080fd5b34801561010f57600080fd5b506101186103de565b6040516101259190610d87565b60405180910390f35b34801561013a57600080fd5b5061015560048036038101906101509190610f45565b6103f4565b005b61015f6104b4565b005b34801561016d57600080fd5b50610176610621565b6040516101839190610fb0565b60405180910390f35b34801561019857600080fd5b506101a1610629565b6040516101ae9190610fe4565b60405180910390f35b3480156101c357600080fd5b506101de60048036038101906101d9919061105a565b610651565b005b3480156101ec57600080fd5b50610207600480360381019061020291906110a7565b61083f565b6040516102149190611115565b60405180910390f35b34801561022957600080fd5b50610232610887565b60405161023f9190610fb0565b60405180910390f35b34801561025457600080fd5b5061025d610896565b60405161026a9190610fb0565b60405180910390f35b34801561027f57600080fd5b5061029a600480360381019061029591906111e5565b6108a3565b6040516102a89291906112c8565b60405180910390f35b3480156102bd57600080fd5b506102c6610962565b6040516102d39190610fb0565b60405180910390f35b3480156102e857600080fd5b506102f161096a565b6040516102fe9190611115565b60405180910390f35b34801561031357600080fd5b5061031c610994565b6040516103299190610fb0565b60405180910390f35b34801561033e57600080fd5b506103476109bc565b6040516103549190611317565b60405180910390f35b34801561036957600080fd5b506103726109e4565b60405161037f9190611355565b60405180910390f35b34801561039457600080fd5b5061039d610a0c565b6040516103aa9190610fb0565b60405180910390f35b3480156103bf57600080fd5b506103c8610a34565b6040516103d59190610fb0565b60405180910390f35b60008060009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104a657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161049d929190611370565b60405180910390fd5b6104b08282610a3e565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561050e576040517f85ddb61400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561052257610521610d10565b5b60008054906101000a900460ff16600181111561054257610541610d10565b5b14610579576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0e182898f1846c09916c55f8a8e8e798df06b3631e1611e34a10303066d973ee60405160405180910390a2565b600042905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600061066b604051806020016040528060008152506108a3565b509050806106d85760008054906101000a900460ff16600181111561069357610692610d10565b5b600180549050476040517f3a8d60860000000000000000000000000000000000000000000000000000000081526004016106cf93929190611399565b60405180910390fd5b60016000806101000a81548160ff021916908360018111156106fd576106fc610d10565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060047f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016107c79594939291906113ed565b6020604051808303816000875af11580156107e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080a9190611455565b9050807f54a2f0e96a09d81548160fba93801a938df827d134cc10871a7058b811003d4a60405160405180910390a250505050565b60006001828154811061085557610854611482565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600163ffffffff16905090565b6000600180549050905090565b6000606060008060018111156108bc576108bb610d10565b5b60008054906101000a900460ff1660018111156108dc576108db610d10565b5b1490506000806001805490501190506000804711905060007f00000000000000000000000000000000000000000000000000000000000000006002544261092391906114e0565b1190508380156109305750815b80156109395750825b80156109425750805b955085604051806020016040528060008152509550955050505050915091565b600047905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b600060018054905082600081518110610a5a57610a59611482565b5b6020026020010151610a6c9190611543565b9050600060018281548110610a8457610a83611482565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610b0d57610b0c610e02565b5b604051908082528060200260200182016040528015610b3b5781602001602082028036833780820191505090505b5060019080519060200190610b51929190610c69565b5060008060006101000a81548160ff02191690836001811115610b7757610b76610d10565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610ba2906115a5565b60006040518083038185875af1925050503d8060008114610bdf576040519150601f19603f3d011682016040523d82523d6000602084013e610be4565b606091505b5050905080610c1f576040517f6253f84e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f74f12a2f610c43ee036f53b902444b51bb56b4aa54228c928e77504625457f5f60405160405180910390a25050505050565b828054828255906000526020600020908101928215610ce2579160200282015b82811115610ce15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c89565b5b509050610cef9190610cf3565b5090565b5b80821115610d0c576000816000905550600101610cf4565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d5057610d4f610d10565b5b50565b6000819050610d6182610d3f565b919050565b6000610d7182610d53565b9050919050565b610d8181610d66565b82525050565b6000602082019050610d9c6000830184610d78565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610dc981610db6565b8114610dd457600080fd5b50565b600081359050610de681610dc0565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e3a82610df1565b810181811067ffffffffffffffff82111715610e5957610e58610e02565b5b80604052505050565b6000610e6c610da2565b9050610e788282610e31565b919050565b600067ffffffffffffffff821115610e9857610e97610e02565b5b602082029050602081019050919050565b600080fd5b6000610ec1610ebc84610e7d565b610e62565b90508083825260208201905060208402830185811115610ee457610ee3610ea9565b5b835b81811015610f0d5780610ef98882610dd7565b845260208401935050602081019050610ee6565b5050509392505050565b600082601f830112610f2c57610f2b610dec565b5b8135610f3c848260208601610eae565b91505092915050565b60008060408385031215610f5c57610f5b610dac565b5b6000610f6a85828601610dd7565b925050602083013567ffffffffffffffff811115610f8b57610f8a610db1565b5b610f9785828601610f17565b9150509250929050565b610faa81610db6565b82525050565b6000602082019050610fc56000830184610fa1565b92915050565b6000819050919050565b610fde81610fcb565b82525050565b6000602082019050610ff96000830184610fd5565b92915050565b600080fd5b60008083601f84011261101a57611019610dec565b5b8235905067ffffffffffffffff81111561103757611036610fff565b5b60208301915083600182028301111561105357611052610ea9565b5b9250929050565b6000806020838503121561107157611070610dac565b5b600083013567ffffffffffffffff81111561108f5761108e610db1565b5b61109b85828601611004565b92509250509250929050565b6000602082840312156110bd576110bc610dac565b5b60006110cb84828501610dd7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110ff826110d4565b9050919050565b61110f816110f4565b82525050565b600060208201905061112a6000830184611106565b92915050565b600080fd5b600067ffffffffffffffff8211156111505761114f610e02565b5b61115982610df1565b9050602081019050919050565b82818337600083830152505050565b600061118861118384611135565b610e62565b9050828152602081018484840111156111a4576111a3611130565b5b6111af848285611166565b509392505050565b600082601f8301126111cc576111cb610dec565b5b81356111dc848260208601611175565b91505092915050565b6000602082840312156111fb576111fa610dac565b5b600082013567ffffffffffffffff81111561121957611218610db1565b5b611225848285016111b7565b91505092915050565b60008115159050919050565b6112438161122e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611283578082015181840152602081019050611268565b60008484015250505050565b600061129a82611249565b6112a48185611254565b93506112b4818560208601611265565b6112bd81610df1565b840191505092915050565b60006040820190506112dd600083018561123a565b81810360208301526112ef818461128f565b90509392505050565b600063ffffffff82169050919050565b611311816112f8565b82525050565b600060208201905061132c6000830184611308565b92915050565b600067ffffffffffffffff82169050919050565b61134f81611332565b82525050565b600060208201905061136a6000830184611346565b92915050565b60006040820190506113856000830185611106565b6113926020830184611106565b9392505050565b60006060820190506113ae6000830186610fa1565b6113bb6020830185610fa1565b6113c86040830184610fa1565b949350505050565b600061ffff82169050919050565b6113e7816113d0565b82525050565b600060a0820190506114026000830188610fd5565b61140f6020830187611346565b61141c60408301866113de565b6114296060830185611308565b6114366080830184611308565b9695505050505050565b60008151905061144f81610dc0565b92915050565b60006020828403121561146b5761146a610dac565b5b600061147984828501611440565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114eb82610db6565b91506114f683610db6565b925082820390508181111561150e5761150d6114b1565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061154e82610db6565b915061155983610db6565b92508261156957611568611514565b5b828206905092915050565b600081905092915050565b50565b600061158f600083611574565b915061159a8261157f565b600082019050919050565b60006115b082611582565b915081905091905056fea2646970667358221220ba7be275405efd99269f10e31c9ca09dfde3144fccc1a28e08f42b7a61c8d23464736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100fe5760003560e01c8063565429de1161009557806391ad27b41161006457806391ad27b4146103075780639862eed014610332578063b4f8d9f21461035d578063c1945a2614610388578063c1c244e8146103b3576100fe565b8063565429de146102485780636e04ff0d146102735780636f9fb98a146102b15780638e7ea5b2146102dc576100fe565b806340cc232b116100d157806340cc232b1461018c5780634585e33b146101b7578063460e2049146101e057806353a2c19a1461021d576100fe565b8063115cbaf5146101035780631fe543e31461012e5780632cfcc53914610157578063320229eb14610161575b600080fd5b34801561010f57600080fd5b506101186103de565b6040516101259190610d87565b60405180910390f35b34801561013a57600080fd5b5061015560048036038101906101509190610f45565b6103f4565b005b61015f6104b4565b005b34801561016d57600080fd5b50610176610621565b6040516101839190610fb0565b60405180910390f35b34801561019857600080fd5b506101a1610629565b6040516101ae9190610fe4565b60405180910390f35b3480156101c357600080fd5b506101de60048036038101906101d9919061105a565b610651565b005b3480156101ec57600080fd5b50610207600480360381019061020291906110a7565b61083f565b6040516102149190611115565b60405180910390f35b34801561022957600080fd5b50610232610887565b60405161023f9190610fb0565b60405180910390f35b34801561025457600080fd5b5061025d610896565b60405161026a9190610fb0565b60405180910390f35b34801561027f57600080fd5b5061029a600480360381019061029591906111e5565b6108a3565b6040516102a89291906112c8565b60405180910390f35b3480156102bd57600080fd5b506102c6610962565b6040516102d39190610fb0565b60405180910390f35b3480156102e857600080fd5b506102f161096a565b6040516102fe9190611115565b60405180910390f35b34801561031357600080fd5b5061031c610994565b6040516103299190610fb0565b60405180910390f35b34801561033e57600080fd5b506103476109bc565b6040516103549190611317565b60405180910390f35b34801561036957600080fd5b506103726109e4565b60405161037f9190611355565b60405180910390f35b34801561039457600080fd5b5061039d610a0c565b6040516103aa9190610fb0565b60405180910390f35b3480156103bf57600080fd5b506103c8610a34565b6040516103d59190610fb0565b60405180910390f35b60008060009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104a657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161049d929190611370565b60405180910390fd5b6104b08282610a3e565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561050e576040517f85ddb61400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561052257610521610d10565b5b60008054906101000a900460ff16600181111561054257610541610d10565b5b14610579576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0e182898f1846c09916c55f8a8e8e798df06b3631e1611e34a10303066d973ee60405160405180910390a2565b600042905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600061066b604051806020016040528060008152506108a3565b509050806106d85760008054906101000a900460ff16600181111561069357610692610d10565b5b600180549050476040517f3a8d60860000000000000000000000000000000000000000000000000000000081526004016106cf93929190611399565b60405180910390fd5b60016000806101000a81548160ff021916908360018111156106fd576106fc610d10565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060047f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016107c79594939291906113ed565b6020604051808303816000875af11580156107e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080a9190611455565b9050807f54a2f0e96a09d81548160fba93801a938df827d134cc10871a7058b811003d4a60405160405180910390a250505050565b60006001828154811061085557610854611482565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600163ffffffff16905090565b6000600180549050905090565b6000606060008060018111156108bc576108bb610d10565b5b60008054906101000a900460ff1660018111156108dc576108db610d10565b5b1490506000806001805490501190506000804711905060007f00000000000000000000000000000000000000000000000000000000000000006002544261092391906114e0565b1190508380156109305750815b80156109395750825b80156109425750805b955085604051806020016040528060008152509550955050505050915091565b600047905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b600060018054905082600081518110610a5a57610a59611482565b5b6020026020010151610a6c9190611543565b9050600060018281548110610a8457610a83611482565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610b0d57610b0c610e02565b5b604051908082528060200260200182016040528015610b3b5781602001602082028036833780820191505090505b5060019080519060200190610b51929190610c69565b5060008060006101000a81548160ff02191690836001811115610b7757610b76610d10565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610ba2906115a5565b60006040518083038185875af1925050503d8060008114610bdf576040519150601f19603f3d011682016040523d82523d6000602084013e610be4565b606091505b5050905080610c1f576040517f6253f84e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f74f12a2f610c43ee036f53b902444b51bb56b4aa54228c928e77504625457f5f60405160405180910390a25050505050565b828054828255906000526020600020908101928215610ce2579160200282015b82811115610ce15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c89565b5b509050610cef9190610cf3565b5090565b5b80821115610d0c576000816000905550600101610cf4565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d5057610d4f610d10565b5b50565b6000819050610d6182610d3f565b919050565b6000610d7182610d53565b9050919050565b610d8181610d66565b82525050565b6000602082019050610d9c6000830184610d78565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610dc981610db6565b8114610dd457600080fd5b50565b600081359050610de681610dc0565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e3a82610df1565b810181811067ffffffffffffffff82111715610e5957610e58610e02565b5b80604052505050565b6000610e6c610da2565b9050610e788282610e31565b919050565b600067ffffffffffffffff821115610e9857610e97610e02565b5b602082029050602081019050919050565b600080fd5b6000610ec1610ebc84610e7d565b610e62565b90508083825260208201905060208402830185811115610ee457610ee3610ea9565b5b835b81811015610f0d5780610ef98882610dd7565b845260208401935050602081019050610ee6565b5050509392505050565b600082601f830112610f2c57610f2b610dec565b5b8135610f3c848260208601610eae565b91505092915050565b60008060408385031215610f5c57610f5b610dac565b5b6000610f6a85828601610dd7565b925050602083013567ffffffffffffffff811115610f8b57610f8a610db1565b5b610f9785828601610f17565b9150509250929050565b610faa81610db6565b82525050565b6000602082019050610fc56000830184610fa1565b92915050565b6000819050919050565b610fde81610fcb565b82525050565b6000602082019050610ff96000830184610fd5565b92915050565b600080fd5b60008083601f84011261101a57611019610dec565b5b8235905067ffffffffffffffff81111561103757611036610fff565b5b60208301915083600182028301111561105357611052610ea9565b5b9250929050565b6000806020838503121561107157611070610dac565b5b600083013567ffffffffffffffff81111561108f5761108e610db1565b5b61109b85828601611004565b92509250509250929050565b6000602082840312156110bd576110bc610dac565b5b60006110cb84828501610dd7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110ff826110d4565b9050919050565b61110f816110f4565b82525050565b600060208201905061112a6000830184611106565b92915050565b600080fd5b600067ffffffffffffffff8211156111505761114f610e02565b5b61115982610df1565b9050602081019050919050565b82818337600083830152505050565b600061118861118384611135565b610e62565b9050828152602081018484840111156111a4576111a3611130565b5b6111af848285611166565b509392505050565b600082601f8301126111cc576111cb610dec565b5b81356111dc848260208601611175565b91505092915050565b6000602082840312156111fb576111fa610dac565b5b600082013567ffffffffffffffff81111561121957611218610db1565b5b611225848285016111b7565b91505092915050565b60008115159050919050565b6112438161122e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611283578082015181840152602081019050611268565b60008484015250505050565b600061129a82611249565b6112a48185611254565b93506112b4818560208601611265565b6112bd81610df1565b840191505092915050565b60006040820190506112dd600083018561123a565b81810360208301526112ef818461128f565b90509392505050565b600063ffffffff82169050919050565b611311816112f8565b82525050565b600060208201905061132c6000830184611308565b92915050565b600067ffffffffffffffff82169050919050565b61134f81611332565b82525050565b600060208201905061136a6000830184611346565b92915050565b60006040820190506113856000830185611106565b6113926020830184611106565b9392505050565b60006060820190506113ae6000830186610fa1565b6113bb6020830185610fa1565b6113c86040830184610fa1565b949350505050565b600061ffff82169050919050565b6113e7816113d0565b82525050565b600060a0820190506114026000830188610fd5565b61140f6020830187611346565b61141c60408301866113de565b6114296060830185611308565b6114366080830184611308565b9695505050505050565b60008151905061144f81610dc0565b92915050565b60006020828403121561146b5761146a610dac565b5b600061147984828501611440565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114eb82610db6565b91506114f683610db6565b925082820390508181111561150e5761150d6114b1565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061154e82610db6565b915061155983610db6565b92508261156957611568611514565b5b828206905092915050565b600081905092915050565b50565b600061158f600083611574565b915061159a8261157f565b600082019050919050565b60006115b082611582565b915081905091905056fea2646970667358221220ba7be275405efd99269f10e31c9ca09dfde3144fccc1a28e08f42b7a61c8d23464736f6c63430008120033",
  "devdoc": {
    "author": "Nilesh Nath description : It randomly picks the winner from the participants of the lotter and transfer all the               funds to that address",
    "details": "It uses Chainlink VRF version 2 and chainlink keepers",
    "kind": "dev",
    "methods": {},
    "title": "Smart Lottery",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkUpkeep(bytes)": {
        "notice": "Following are the requirements that is to be completed for triggering Chainlink Keepers 1.TimeStamp reach 2.Enough Players in Lottery 3.Enough Balance in Lottery 4.Lottery in Open State"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 243,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(raffleStates)238"
      },
      {
        "astId": 246,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 263,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 267,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_winner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(raffleStates)238": {
        "encoding": "inplace",
        "label": "enum Raffle.raffleStates",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}